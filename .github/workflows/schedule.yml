name: Sitemap Keyword Analysis

on:
  # 每4小时自动执行
  schedule:
    - cron: '0 */4 * * *'
  
  # 支持手动触发
  workflow_dispatch:
    inputs:
      log_level:
        description: '日志级别'
        required: false
        default: 'INFO'
        type: choice
        options:
          - DEBUG
          - INFO
          - WARNING
          - ERROR
      dry_run:
        description: '试运行模式（不提交数据）'
        required: false
        default: false
        type: boolean
      health_check_only:
        description: '仅执行健康检查'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  
jobs:
  sitemap-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 创建必要目录
      run: |
        mkdir -p data logs
        
    - name: 验证配置文件和环境变量
      env:
        SEO_API_URLS: ${{ secrets.SEO_API_URLS }}
        BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
        BACKEND_API_TOKEN: ${{ secrets.BACKEND_API_TOKEN }}
        SITEMAP_URLS: ${{ secrets.SITEMAP_URLS }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        echo "🔍 验证必需的配置文件..."

        # 验证必需的配置文件
        if [ ! -f "config/config.yaml" ]; then
          echo "❌ 错误: config/config.yaml 不存在"
          exit 1
        fi
        echo "✅ config/config.yaml 存在"

        # 检查URL规则文件（支持多个可能的文件名）
        if [ -f "config/game_url_rules.yaml" ]; then
          echo "✅ config/game_url_rules.yaml 存在"
        elif [ -f "config/url_rules.yaml" ]; then
          echo "✅ config/url_rules.yaml 存在"
        else
          echo "❌ 错误: URL规则文件不存在 (需要 config/game_url_rules.yaml 或 config/url_rules.yaml)"
          exit 1
        fi

        echo "🔍 验证必需的环境变量..."

        # 验证必需的环境变量
        for var_name in SEO_API_URLS BACKEND_API_URL BACKEND_API_TOKEN SITEMAP_URLS ENCRYPTION_KEY; do
          var_value=$(eval echo \$$var_name)
          if [ -z "$var_value" ]; then
            echo "❌ 错误: $var_name 环境变量未设置"
            exit 1
          fi
          echo "✅ $var_name 已设置"
        done

        echo "🔍 验证sitemap配置..."

        # 检查sitemap配置：优先使用环境变量，备选文件
        if [ -n "$SITEMAP_URLS" ]; then
          echo "✅ 使用环境变量 SITEMAP_URLS 配置sitemap列表"
        elif [ -f "config/sitemaps.txt" ]; then
          echo "✅ 使用文件 config/sitemaps.txt 配置sitemap列表"
        else
          echo "❌ 错误: 既没有设置 SITEMAP_URLS 环境变量，也没有 config/sitemaps.txt 文件"
          exit 1
        fi

        echo "🎉 配置文件和环境变量验证通过"
        
    - name: 设置环境变量
      env:
        SEO_API_URLS: ${{ secrets.SEO_API_URLS }}
        BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
        BACKEND_API_TOKEN: ${{ secrets.BACKEND_API_TOKEN }}
        SITEMAP_URLS: ${{ secrets.SITEMAP_URLS }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}
      run: |
        # 安全地设置环境变量，不在日志中显示敏感信息
        echo "LOG_LEVEL=$LOG_LEVEL" >> $GITHUB_ENV
        echo "✅ 环境变量已安全设置（敏感信息已隐藏）"
        
    # 环境变量验证已在"验证配置文件和环境变量"步骤中完成
        
    - name: 执行健康检查
      env:
        SEO_API_URLS: ${{ secrets.SEO_API_URLS }}
        BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
        BACKEND_API_TOKEN: ${{ secrets.BACKEND_API_TOKEN }}
        SITEMAP_URLS: ${{ secrets.SITEMAP_URLS }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        echo "执行系统健康检查..."
        python main.py --health-check --log-level ${{ env.LOG_LEVEL }}

    - name: 执行sitemap分析
      if: ${{ github.event.inputs.health_check_only != 'true' }}
      env:
        SEO_API_URLS: ${{ secrets.SEO_API_URLS }}
        BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
        BACKEND_API_TOKEN: ${{ secrets.BACKEND_API_TOKEN }}
        SITEMAP_URLS: ${{ secrets.SITEMAP_URLS }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        echo "开始执行sitemap关键词分析..."

        # 构建命令参数（不显示敏感信息）
        CMD_ARGS="--log-level ${{ env.LOG_LEVEL }}"

        # 添加试运行参数
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          CMD_ARGS="$CMD_ARGS --dry-run"
          echo "✅ 试运行模式已启用"
        fi

        echo "✅ 开始执行分析（使用环境变量配置）"
        # 执行分析（环境变量会自动传递给应用程序）
        python main.py $CMD_ARGS
        
    - name: 检查执行结果
      if: ${{ github.event.inputs.health_check_only != 'true' }}
      run: |
        echo "检查执行结果..."

        # 检查日志文件（仅显示统计信息，不显示内容）
        if [ -f "logs/sitemap_analyzer.log" ]; then
          echo "日志文件大小: $(du -h logs/sitemap_analyzer.log | cut -f1)"
          echo "日志行数: $(wc -l < logs/sitemap_analyzer.log)"
          echo "⚠️ 日志内容包含敏感信息，不在此显示"
        else
          echo "警告: 日志文件不存在"
        fi

        # 检查数据文件（仅显示统计信息，不显示内容）
        if [ -f "data/processed_urls.json" ]; then
          echo "数据文件大小: $(du -h data/processed_urls.json | cut -f1)"
          echo "⚠️ 数据文件包含加密URL，不显示具体内容"
        else
          echo "信息: 数据文件不存在（可能是首次运行或无新数据）"
        fi
        
    - name: 生成执行报告
      if: always()
      run: |
        echo "生成执行报告..."
        
        REPORT_FILE="execution-report-$(date +%Y%m%d-%H%M%S).md"
        
        cat > $REPORT_FILE << EOF
        # Sitemap关键词分析执行报告
        
        ## 执行信息
        - **执行时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - **触发方式**: ${{ github.event_name }}
        - **运行ID**: ${{ github.run_id }}
        - **提交SHA**: ${{ github.sha }}
        - **日志级别**: ${{ env.LOG_LEVEL }}
        - **试运行模式**: ${{ github.event.inputs.dry_run || 'false' }}
        - **仅健康检查**: ${{ github.event.inputs.health_check_only || 'false' }}
        
        ## 文件状态
        EOF
        
        # 添加文件信息
        if [ -f "logs/sitemap_analyzer.log" ]; then
          echo "- **日志文件**: 存在 ($(du -h logs/sitemap_analyzer.log | cut -f1))" >> $REPORT_FILE
        else
          echo "- **日志文件**: 不存在" >> $REPORT_FILE
        fi
        
        if [ -f "data/processed_urls.json" ]; then
          echo "- **数据文件**: 存在 ($(du -h data/processed_urls.json | cut -f1))" >> $REPORT_FILE
        else
          echo "- **数据文件**: 不存在" >> $REPORT_FILE
        fi
        
        echo "执行报告已生成: $REPORT_FILE"
        
    # 注意: 不上传日志和数据文件，因为它们包含敏感信息
    # 日志文件包含API URL和调试信息
    # 数据文件包含加密的URL数据
    # 如需调试，请使用本地环境或安全的私有存储
        
    - name: 上传执行报告
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: reports-${{ github.run_number }}
        path: execution-report-*.md
        retention-days: 30
        if-no-files-found: ignore
        
    # 注意: 不上传错误日志，因为可能包含敏感的API信息
    # 如需调试失败原因，请检查GitHub Actions的工作流日志
    # 或在本地环境中重现问题进行调试
        
    - name: 通知执行结果
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Sitemap关键词分析执行成功"
        else
          echo "❌ Sitemap关键词分析执行失败"
          echo "请检查日志文件获取详细错误信息"
        fi
        
        echo "执行摘要:"
        echo "- 运行ID: ${{ github.run_id }}"
        echo "- 执行时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "- 状态: ${{ job.status }}"
