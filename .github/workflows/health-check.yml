name: Health Check

on:
  # 每小时执行健康检查
  schedule:
    - cron: '0 * * * *'
  
  # 支持手动触发
  workflow_dispatch:
  
  # PR时执行健康检查
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'config/**'
      - 'requirements.txt'
      - 'main.py'

env:
  PYTHON_VERSION: '3.8'

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 创建必要目录
      run: |
        mkdir -p data logs
        
    - name: 生成测试环境变量
      run: |
        # 为健康检查生成临时环境变量
        echo "BACKEND_API_URL=https://test-api.example.com/api/keywords" >> $GITHUB_ENV
        echo "ENCRYPTION_KEY=$(python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")" >> $GITHUB_ENV
        echo "SEO_API_URLS=https://api1.example.com,https://api2.example.com" >> $GITHUB_ENV
        
    - name: 验证Python语法
      run: |
        echo "验证Python语法..."
        python -m py_compile main.py
        python -m py_compile src/sitemap_analyzer.py
        python -m py_compile src/data_processor.py
        find src/ -name "*.py" -exec python -m py_compile {} \;
        echo "✅ Python语法验证通过"
        
    - name: 验证导入依赖
      run: |
        echo "验证模块导入..."
        python -c "
        try:
            from src.config import ConfigLoader
            from src.parsers import SitemapParser
            from src.extractors import RuleEngine, KeywordExtractor
            from src.api import SEOAPIManager, BackendAPIClient
            from src.storage import StorageManager
            from src.utils import setup_logging, get_logger
            from src.sitemap_analyzer import SitemapKeywordAnalyzer
            print('✅ 所有模块导入成功')
        except ImportError as e:
            print(f'❌ 模块导入失败: {e}')
            exit(1)
        "
        
    - name: 验证配置文件格式
      run: |
        echo "验证配置文件格式..."
        python -c "
        import yaml
        import json
        from pathlib import Path
        
        # 验证YAML配置文件
        config_files = ['config/config.yaml', 'config/url_rules.yaml']
        for file in config_files:
            if Path(file).exists():
                with open(file, 'r', encoding='utf-8') as f:
                    yaml.safe_load(f)
                print(f'✅ {file} 格式正确')
            else:
                print(f'⚠️ {file} 不存在')
        
        # 验证sitemap列表文件
        if Path('config/sitemaps.txt').exists():
            with open('config/sitemaps.txt', 'r', encoding='utf-8') as f:
                lines = [line.strip() for line in f if line.strip() and not line.startswith('#')]
                print(f'✅ sitemaps.txt 包含 {len(lines)} 个URL')
        else:
            print('⚠️ config/sitemaps.txt 不存在')
        "
        
    - name: 执行基础健康检查
      run: |
        echo "执行基础健康检查..."
        
        # 检查主程序帮助信息
        python main.py --help
        
        # 尝试创建分析器实例（使用测试配置）
        python -c "
        import os
        from src.sitemap_analyzer import SitemapKeywordAnalyzer
        
        try:
            # 确保环境变量存在
            required_vars = ['BACKEND_API_URL', 'ENCRYPTION_KEY']
            for var in required_vars:
                if not os.getenv(var):
                    print(f'❌ 缺少环境变量: {var}')
                    exit(1)
            
            print('✅ 环境变量检查通过')
            print('✅ 基础健康检查完成')
            
        except Exception as e:
            print(f'❌ 健康检查失败: {e}')
            exit(1)
        "
        
    - name: 验证工具函数
      run: |
        echo "验证工具函数..."
        python -c "
        from src.utils.crypto import CryptoUtils
        from src.utils.logger import setup_logging, get_logger
        
        # 测试加密工具
        key = CryptoUtils.generate_key()
        assert CryptoUtils.validate_key(key), '加密密钥验证失败'
        
        # 测试加密解密
        test_text = 'Hello, World!'
        encrypted = CryptoUtils.encrypt_text(test_text, key)
        decrypted = CryptoUtils.decrypt_text(encrypted, key)
        assert decrypted == test_text, '加密解密测试失败'
        
        # 测试日志设置
        setup_logging(log_level='INFO')
        logger = get_logger('test')
        logger.info('测试日志消息')
        
        print('✅ 工具函数验证通过')
        "
        
    - name: 生成健康检查报告
      if: always()
      run: |
        echo "生成健康检查报告..."
        
        REPORT_FILE="health-check-$(date +%Y%m%d-%H%M%S).md"
        
        cat > $REPORT_FILE << EOF
        # 健康检查报告
        
        ## 检查信息
        - **检查时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - **触发方式**: ${{ github.event_name }}
        - **运行ID**: ${{ github.run_id }}
        - **Python版本**: ${{ env.PYTHON_VERSION }}
        - **检查状态**: ${{ job.status }}
        
        ## 检查项目
        - ✅ Python语法验证
        - ✅ 模块导入验证
        - ✅ 配置文件格式验证
        - ✅ 基础健康检查
        - ✅ 工具函数验证
        
        ## 环境信息
        - **操作系统**: ubuntu-latest
        - **工作目录**: \${{ github.workspace }}
        - **仓库**: \${{ github.repository }}
        EOF
        
        echo "健康检查报告已生成: $REPORT_FILE"
        
    - name: 上传健康检查报告
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: health-check-report-${{ github.run_number }}
        path: health-check-*.md
        retention-days: 7
        if-no-files-found: ignore
        
    - name: 通知检查结果
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ 健康检查通过"
        else
          echo "❌ 健康检查失败"
          echo "请检查上述步骤的错误信息"
        fi
