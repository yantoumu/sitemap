name: Deploy Validation

on:
  # 手动触发部署验证
  workflow_dispatch:
    inputs:
      environment:
        description: '验证环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      validate_secrets:
        description: '验证Secrets配置'
        required: false
        default: true
        type: boolean
      test_api_connections:
        description: '测试API连接'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.8'

jobs:
  deploy-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 验证Secrets配置
      if: ${{ github.event.inputs.validate_secrets == 'true' }}
      run: |
        echo "验证GitHub Secrets配置..."
        
        # 检查必需的Secrets
        REQUIRED_SECRETS=(
          "SEO_API_URLS"
          "BACKEND_API_URL" 
          "BACKEND_API_TOKEN"
          "ENCRYPTION_KEY"
        )
        
        MISSING_SECRETS=()
        
        for secret in "${REQUIRED_SECRETS[@]}"; do
          if [ -z "${!secret}" ]; then
            MISSING_SECRETS+=("$secret")
            echo "❌ 缺少Secret: $secret"
          else
            echo "✅ Secret存在: $secret"
          fi
        done
        
        if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
          echo ""
          echo "❌ 部署验证失败: 缺少必需的Secrets"
          echo "请在GitHub仓库设置中配置以下Secrets:"
          for secret in "${MISSING_SECRETS[@]}"; do
            echo "  - $secret"
          done
          exit 1
        fi
        
        echo "✅ 所有必需的Secrets已配置"
      env:
        SEO_API_URLS: ${{ secrets.SEO_API_URLS }}
        BACKEND_API_URL: ${{ secrets.BACKEND_API_URL }}
        BACKEND_API_TOKEN: ${{ secrets.BACKEND_API_TOKEN }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        
    - name: 验证配置文件完整性
      run: |
        echo "验证配置文件完整性..."
        
        # 检查必需的配置文件
        REQUIRED_FILES=(
          "config/config.yaml"
          "config/url_rules.yaml"
          "config/sitemaps.txt"
          "config/logging.conf"
        )
        
        MISSING_FILES=()
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            MISSING_FILES+=("$file")
            echo "❌ 缺少配置文件: $file"
          else
            echo "✅ 配置文件存在: $file"
          fi
        done
        
        if [ ${#MISSING_FILES[@]} -gt 0 ]; then
          echo ""
          echo "❌ 配置验证失败: 缺少必需的配置文件"
          exit 1
        fi
        
        echo "✅ 所有配置文件完整"
        
    - name: 验证sitemap配置
      run: |
        echo "验证sitemap配置..."
        
        if [ ! -f "config/sitemaps.txt" ]; then
          echo "❌ sitemaps.txt 不存在"
          exit 1
        fi
        
        # 统计有效的sitemap URL
        VALID_URLS=$(grep -v '^#' config/sitemaps.txt | grep -v '^$' | wc -l)
        
        if [ "$VALID_URLS" -eq 0 ]; then
          echo "❌ sitemaps.txt 中没有有效的URL"
          exit 1
        fi
        
        echo "✅ 发现 $VALID_URLS 个有效的sitemap URL"
        
        # 显示前5个URL作为示例
        echo "示例URL:"
        grep -v '^#' config/sitemaps.txt | grep -v '^$' | head -5 | sed 's/^/  - /'
        
    - name: 测试API连接
      if: ${{ github.event.inputs.test_api_connections == 'true' }}
      run: |
        echo "测试API连接..."
        
        # 设置环境变量
        export SEO_API_URLS="${{ secrets.SEO_API_URLS }}"
        export BACKEND_API_URL="${{ secrets.BACKEND_API_URL }}"
        export BACKEND_API_TOKEN="${{ secrets.BACKEND_API_TOKEN }}"
        export ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}"
        
        # 创建必要目录
        mkdir -p data logs
        
        # 执行健康检查
        python main.py --health-check --log-level INFO
        
        echo "✅ API连接测试完成"
        
    - name: 验证权限和目录
      run: |
        echo "验证权限和目录..."
        
        # 创建必要目录
        mkdir -p data logs
        
        # 测试写入权限
        echo "test" > data/test_write.txt
        if [ -f "data/test_write.txt" ]; then
          rm data/test_write.txt
          echo "✅ data目录写入权限正常"
        else
          echo "❌ data目录写入权限异常"
          exit 1
        fi
        
        echo "test" > logs/test_write.log
        if [ -f "logs/test_write.log" ]; then
          rm logs/test_write.log
          echo "✅ logs目录写入权限正常"
        else
          echo "❌ logs目录写入权限异常"
          exit 1
        fi
        
    - name: 生成部署验证报告
      if: always()
      run: |
        echo "生成部署验证报告..."
        
        REPORT_FILE="deploy-validation-$(date +%Y%m%d-%H%M%S).md"
        
        cat > $REPORT_FILE << EOF
        # 部署验证报告
        
        ## 验证信息
        - **验证时间**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - **验证环境**: ${{ github.event.inputs.environment }}
        - **运行ID**: ${{ github.run_id }}
        - **验证状态**: ${{ job.status }}
        
        ## 验证项目
        - Secrets配置验证: ${{ github.event.inputs.validate_secrets }}
        - API连接测试: ${{ github.event.inputs.test_api_connections }}
        - 配置文件完整性: ✅
        - 目录权限验证: ✅
        
        ## 环境配置
        - **Python版本**: ${{ env.PYTHON_VERSION }}
        - **操作系统**: ubuntu-latest
        - **工作目录**: \${{ github.workspace }}
        
        ## 下一步操作
        EOF
        
        if [ "${{ job.status }}" = "success" ]; then
          cat >> $REPORT_FILE << EOF
        ✅ 部署验证通过，环境配置正确
        
        可以安全地执行以下操作:
        - 启用定时任务
        - 执行完整的sitemap分析
        - 监控系统运行状态
        EOF
        else
          cat >> $REPORT_FILE << EOF
        ❌ 部署验证失败，请检查以下项目:
        - GitHub Secrets配置
        - 配置文件完整性
        - API连接状态
        - 目录权限设置
        EOF
        fi
        
        echo "部署验证报告已生成: $REPORT_FILE"
        
    - name: 上传验证报告
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deploy-validation-report-${{ github.run_number }}
        path: deploy-validation-*.md
        retention-days: 30
        if-no-files-found: ignore
        
    - name: 通知验证结果
      if: always()
      run: |
        echo ""
        echo "=========================================="
        echo "           部署验证结果"
        echo "=========================================="
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ 部署验证成功"
          echo ""
          echo "环境 '${{ github.event.inputs.environment }}' 已准备就绪"
          echo "可以安全地执行sitemap关键词分析任务"
        else
          echo "❌ 部署验证失败"
          echo ""
          echo "请检查上述步骤的错误信息并修复问题"
          echo "修复后重新运行部署验证"
        fi
        
        echo "=========================================="
